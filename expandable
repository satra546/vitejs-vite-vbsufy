import React from 'react';

import { useTable, useExpanded, Column, Row, UseExpandedRowProps } from 'react-table';
import 'bootstrap/dist/css/bootstrap.min.css';

interface IData {
  id: string;
  type: string;
  product?: string;
  fab: string;
  description?: string | null;
  subRows?: IData[];
}

interface ITable {
  columns: Column<IData>[];
  data: IData[];
}

const Table: React.FC<ITable> = ({ columns, data }) => {
  const {
    getTableProps,
    getTableBodyProps,
    headerGroups,
    rows,
    prepareRow,
    state: { expanded },
  } = useTable<IData>(
    {
      columns,
      data,
    },
    useExpanded, // Use the useExpanded plugin hook
  );

  return (
    <div>
      <table className="table" {...getTableProps()}>
        <thead>
          {headerGroups.map(headerGroup => (
            <tr {...headerGroup.getHeaderGroupProps()}>
              {headerGroup.headers.map(column => (
                <th {...column.getHeaderProps()}>{column.render('Header')}</th>
              ))}
            </tr>
          ))}
        </thead>
        <tbody {...getTableBodyProps()}>
          {rows.map((row: Row<IData> & UseExpandedRowProps<IData>) => {
            prepareRow(row);
            return (
              <tr {...row.getRowProps()}>
                {row.cells.map(cell => {
                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>;
                })}
              </tr>
            );
          })}
        </tbody>
      </table>
      <br />
      <div>Showing the first 20 results of {rows.length} rows</div>
      <pre>
        <code>{JSON.stringify({ expanded }, null, 2)}</code>
      </pre>
    </div>
  );
};

const ExpandableTableComponent: React.FC = () => {
  const columns = React.useMemo<Column<IData>[]>(
    () => [
      {
        id: 'expander', // Make sure it has an ID
        Header: ({ getToggleAllRowsExpandedProps, isAllRowsExpanded }) => (
          <span {...getToggleAllRowsExpandedProps()}>{isAllRowsExpanded ? 'ðŸ‘‡' : 'ðŸ‘‰'}</span>
        ),
        Cell: ({ row }) =>
          row.canExpand ? (
            <span
              {...row.getToggleRowExpandedProps({
                style: {
                  paddingLeft: `${row.depth * 2}rem`,
                },
              })}
            >
              {row.isExpanded ? 'ðŸ‘‡' : 'ðŸ‘‰'}
            </span>
          ) : null,
      },
      {
        Header: 'Name',
        columns: [
          {
            Header: 'ID',
            accessor: 'id',
          },
          {
            Header: 'Type',
            accessor: 'type',
          },
          {
            Header: 'Fab',
            accessor: 'fab',
          },
        ],
      },
    ],
    [],
  );

  const data = React.useMemo<IData[]>(
    () => [
      {
        id: 'txn.crd_entprty',
        type: 'Data Element',
        product: 'ICNT-ATLAS-SIMCORP-API',
        fab: 'fnd-crtfct-trns-API',
        description: null,
        subRows: [
          {
            id: 'Transformation',
            type: 'Transforn',
            product: 'ICAT-ATLAS-SIMCORP-API',
            fab: 'fnd-crtfct-trns-API',
            description: 'n/a',
            subRows: [
              {
                id: 'ed_cntrprty',
                type: 'Data Element',
                product: 'ICHT-AladdinAtlas Interface',
                fab: 'Atlas_Pos_Trans',
                description: null,
                subRows: [
                  {
                    id: 'Transformation',
                    type: 'Transforn',
                    product: 'ICT-AladdinAtlas Interface',
                    fab: 'Atlas_Pos_Trans',
                    description: 'If transaction. tran_type is CALL, PUT, EXIN, or EXOUT',
                    subRows: [
                      {
                        id: 'TRAN_TYPE',
                        type: 'Data Element',
                        product: 'ICM-Blackrock-Aladdin',
                        fab: 'MainTransaction',
                        description: null,
                      },
                      {
                        id: 'TRAN_TYPE',
                        type: 'Data Element',
                        product: 'ICM-Blackrock-Aladdin',
                        fab: 'MainTransaction',
                        description: null,
                      },
                    ],
                  },
                ],
              },
            ],
          },
        ],
      },
    ],
    [],
  );

  return <Table columns={columns} data={data} />;
};

export default ExpandableTableComponent;
